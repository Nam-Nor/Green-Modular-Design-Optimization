function [newGen] = GreenModGeneticAlgorithmUL(prevGen,prevGenScores)
% GENETIC ALGORITHM TO PROCESS A GIVEN SET OF CHROMOSOMES DEFINING A
% POPULATION AND USE FITNESS SCORES TO PRODUCE A NEW GENERATION WITH
% CROSSOVER AND MUTATION ALTERATIONS.
%
%   NOTE: THIS SHOULD BE USED WITH THE UPPER LEVEL OPTIMIZATION!
%         UNLIKE GreenModGeneticAlgorithmLL.m THIS CODE CONSIDERES THE
%         FITNESS PERFORMANCE OF INDIVIDUALES BY THE SECOND INPUT OF 
%         SCORES (FROM THE F(X) FITNESS FUNCTION)
%
%   INPUTS:
%       [PxN DOUBLE] ARRAY OF DESIGN VECTORS DEFINING A POPULATION FOR A
%                    ITERATIVE GENERATION
%       [Px1 DOUBLE] SCORE OF THE INDIVIDUALS (CHROMOSOMES THAT ARE THE
%                    ROWS OF THE ARRAY) WHEN TESTED AGAINST A FITNESS
%                    FUNCITON
%   OUTPUTS:
%       [PxN DOUBLE] ARRAY OF ALTERED POPULATION THAT DEFINES THE NEXT
%                    GENERATION IN THE OPTIMIZATION
%
%
% ENGINEERS: JAMES S COLLINS
%            BEN DUSSALT
%            NAMKHA NORSANG
%            NISHANTH KATHIRVEL
%
% PROJECT: ME 6101 GREEN MODULAR DESIGN GROUP PROJECT
% DATE: NOVEMBER 2017
% LOCATION: GEORGIA INSTITUTE OF TECHNOLOGY. ATL, GA
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% SCALE THE FITNESS FUNCTION SCORES 
expectation = GreenModFitScalingRank(prevGenScores);
% DERIVE THE CORRESPONDING INDEX VECTOR FOR CROSSOVER 
mateIndex = GreenModSelection(expectation);
% CALL THE CROSSOVER FUNCTION TO MATE DIFFERENT INDIVIDUALS IN ROWS OF THE
% POPULATION ARRAY
newGen = GreenModCrossoverScattered(prevGen,mateIndex);
% INTRODUCE MUTATIONS
newGen = GreenModMutation(newGen);
end
